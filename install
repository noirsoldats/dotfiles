#!/usr/bin/env bash

# Install the git submodule so I have my vim plugins
git submodule update --init --recursive

# Ask for basic variable information
echo -n "Full Name: "; read FULLNAME
echo -n "Email: "; read EMAIL
#echo -n "The following are optional, press enter to skip.\n";
#echo -n "Alias SH User Number: "; read ALIAS_SH_USER_ID
#echo -n "Alias SH Private Key: "; read ALIAS_SH_PRIVATE_KEY
#echo "Select Custom Git Prompt (basic, informative): "; read GIT_PROMPT

# Write configs
echo "export FULLNAME=$FULLNAME" > ~/.bash_config
echo "export EMAIL=$EMAIL" >> ~/.bash_config
#echo "export ALIAS_SH_USER_ID=$ALIAS_SH_USER_ID" >> ~/.bash_config
#echo "export ALIAS_SH_PRIVATE_KEY=$ALIAS_SH_PRIVATE_KEY" >> ~/.bash_config
echo "" >> ~/.bash_config
#if [ "$GIT_PROMPT" == "basic" ] || [ "$GIT_PROMPT" == "informative" ]; then
#    # Custom for Git Prompts
#    echo "export __GIT_PROMPT_DIR=~/.bash/$GIT_PROMPT-git-prompt" >> ~/.bash_config
#    echo "source ~/.bash/$GIT_PROMPT-git-prompt/gitprompt.sh" >> ~/.bash_config
#else
#    echo "Invalid Git Prompt, skipping."
#fi

# Start with the simple dotfiles
dotfiles=( .bashrc .bash_aliases .hgrc .vim .vimrc .gitignore_global ) #Removed .bash
for i in "${dotfiles[@]}"
do
    if [ ! -e ~/$i ]; then 
        echo "Creating ~/$i -> $(pwd)/$i"
        ln -s $(pwd)/$i ~/$i
    fi
done

# Handle .gitconfig specially.
sed -e "s/__FULLNAME__/$FULLNAME/" -e "s/__EMAIL__/$EMAIL/" $(pwd)/.gitconfig > ~/.gitconfig

# Create an env-specific file, just in case
if [ ! -f ~/.bashrc.local ]; then
  echo "# Put environment-specific stuff here." > ~/.bashrc.local
fi

echo "Put your custom bash stuff in ~/.bashrc.local,\nthe clean and install scripts will not touch that file."

source ~/.bashrc